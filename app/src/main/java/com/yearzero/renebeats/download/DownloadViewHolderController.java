package com.yearzero.renebeats.download;import android.app.Activity;import android.content.Context;import android.view.LayoutInflater;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.recyclerview.widget.ItemTouchHelper;import androidx.recyclerview.widget.RecyclerView;import com.google.android.material.snackbar.Snackbar;import com.yearzero.renebeats.R;import com.yearzero.renebeats.download.ui.viewholder.BasicViewHolder;import com.yearzero.renebeats.download.ui.viewholder.FailedViewHolder;import com.yearzero.renebeats.download.ui.viewholder.QueueViewHolder;import com.yearzero.renebeats.download.ui.viewholder.RunningViewHolder;import com.yearzero.renebeats.download.ui.viewholder.SuccessViewHolder;class DownloadViewHolderController {        static int getViewHolderType(Status pack) {            if (pack.isFailed() || pack.isCancelled() || pack.isInvalid())                return FailedViewHolder.LocalID;            else if (pack.getDownload() == Status.Download.COMPLETE && (pack.getConvert() == Status.Convert.COMPLETE || pack.getConvert() == Status.Convert.SKIPPED))                return pack.getMetadata() == null ? RunningViewHolder.LocalID : SuccessViewHolder.LocalID;            else if (pack.isQueued() || pack.isPaused())                return QueueViewHolder.LocalID;            else if (pack.getDownload() == Status.Download.RUNNING || pack.getDownload() == Status.Download.PAUSED || pack.getConvert() == Status.Convert.RUNNING) //|| pack.convert == Status.Convert.PAUSED)                return RunningViewHolder.LocalID;            else return BasicViewHolder.LocalID;        }        static BasicViewHolder getViewHolderByType(Context context, ViewGroup parent, int viewID) {            switch (viewID) {                case QueueViewHolder.LocalID:                    return new QueueViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_download_queue, parent, false));                case RunningViewHolder.LocalID:                    return new RunningViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_download_running, parent, false));                case SuccessViewHolder.LocalID:                    return new SuccessViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_download_success, parent, false));                case FailedViewHolder.LocalID:                    return new FailedViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_download_failed, parent, false));                default:                    return new BasicViewHolder(LayoutInflater.from(context).inflate(R.layout.layout_download_basic, parent, false));            }        }    static class DownloadSwipeCallback extends ItemTouchHelper.SimpleCallback {        private Activity activity;        private RecyclerView.Adapter<BasicViewHolder> adapter;        DownloadSwipeCallback(Activity activity, RecyclerView.Adapter<BasicViewHolder> adapter) {            super(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT);            this.activity = activity;            this.adapter = adapter;        }        @Override        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {            return false;        }        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {            if (adapter instanceof DownloadAdapter){                DownloadAdapter downloadAdapter = (DownloadAdapter) adapter;                downloadAdapter.blacklistAt(viewHolder.getAdapterPosition());                String title = viewHolder instanceof BasicViewHolder && !((BasicViewHolder) viewHolder).getTitle().toString().trim().isEmpty() ? ((BasicViewHolder) viewHolder).getTitle().toString() : "a download";                Snackbar.make(activity.getWindow().getDecorView().getRootView(), "Hid " + title, Snackbar.LENGTH_LONG)                        .setAction("Undo", a -> {                            downloadAdapter.unBlacklistAt(viewHolder.getAdapterPosition());                            Snackbar.make(activity.getWindow().getDecorView().getRootView(), "Unhid " + title, Snackbar.LENGTH_LONG)                                    .show();                }).show();            }        }    }}