package com.yearzero.renebeats.downloadimport java.io.Serializableimport java.util.*class Status : Serializable {    var download: Download? = null    var convert: Convert? = null    var metadata: Boolean? = null    var isInvalid: Boolean = false    val isSuccessful: Boolean        get() = download == Download.COMPLETE && (convert == Convert.COMPLETE || convert == Convert.SKIPPED) && metadata != null && metadata!!    val isQueued: Boolean        get() = (download == Download.QUEUED || download == Download.NETWORK_PENDING || convert == Convert.QUEUED) && metadata == null//    val isPaused: Boolean//        get() = (download == Download.PAUSED || download == Download.NETWORK_PENDING /*|| convert == Convert.PAUSED*/) && metadata == null    val isCancelled: Boolean        get() = (download == Download.CANCELLED || convert == Convert.CANCELLED) && metadata == null    val isFailed: Boolean        get() = download == Download.FAILED || convert == Convert.FAILED || metadata != null && !metadata!!    enum class Download(val value: String, val index: Int) {        QUEUED("queued", 0),        RUNNING("running", 1),        NETWORK_PENDING("network pending", 2),        PAUSED("paused", 3),        COMPLETE("complete", 4),        CANCELLED("cancelled", 5),        FAILED("failed", 6);        companion object {            @JvmStatic            fun fromValue(value: String?) = when (value?.toLowerCase(Locale.ENGLISH)) {                "queued" -> QUEUED                "running" -> RUNNING                "network pending" -> NETWORK_PENDING                "paused" -> PAUSED                "complete" -> COMPLETE                "cancelled" -> CANCELLED                "failed" -> FAILED                else -> null            }        }    }    enum class Convert(val value: String, val index: Int) {        SKIPPED("skipped", 0),        //        PAUSED("paused"),        QUEUED("queued", 1),        RUNNING("running", 2),        CANCELLED("cancelled", 3),        COMPLETE("complete", 4),        FAILED("failed", 5);        //Index must correspond to code line number!!!        companion object {            @JvmStatic            fun fromValue(value: String?) = when (value?.toLowerCase(Locale.ENGLISH)) {                "skipped" -> SKIPPED                "queued" -> QUEUED                "running" -> RUNNING                "cancelled" -> CANCELLED                "complete" -> COMPLETE                "failed" -> FAILED                else -> null            }        }    }    constructor()    constructor(download: Download?, convert: Convert?, metadata: Boolean?) {        this.download = download        this.convert = convert        this.metadata = metadata    }    // pack() does not implement invalid    // |--Stupid Sign Bit--|--Misc--|--Down--|--Conv--|--Meta--|    //           0           15bits   000000   000000    0000    fun pack(): Int {        var mtdt = 0        if (metadata != null) {            mtdt = if (metadata!!) 2 else 1        }        return (((if (download == null) 0 else download!!.index + 1) and 0x3F) shl 10) or (if (convert == null) 0 else ((convert!!.index + 1) and 0x3F) shl 4) or mtdt    }    override fun hashCode(): Int = pack()    override fun equals(other: Any?): Boolean {        if (this === other) return true        if (other !is Status) return false        if (download != other.download ||                convert != other.convert ||                metadata != other.metadata ||                isInvalid != other.isInvalid) return false        return true    }    companion object {        // Appcode (EA50) - "Class" (ClA5) - Class ID (515A_1500)        @JvmStatic private val serialVersionUID = -1562536154918939392L//0xEA50_C1A5_515A_1500L;        @JvmStatic fun unpack(pkg: Int): Status {            var md: Boolean? = null            val pmd = pkg and 0x3FF            if (pmd == 1)                md = false            else if (pmd == 2)                md = true            val down: Byte = ((pkg and 0xFC00) shr 10).toByte()            val conv: Byte = ((pkg and 0x3F0) shr 4).toByte()            // down and conv cannot be negative            return Status(if (down > Download.values().size) null else Download.values()[down - 1],                    if (conv > Convert.values().size) null else Convert.values()[conv - 1],                    md)        }    }}